apply plugin: 'maven-publish'
apply plugin: 'signing'

def isLocalBuild() {
    return hasProperty("LOCAL")
}

def isReleaseBuild() {
    return hasProperty("RELEASE")
}

def isSnapshotBuild() {
    return hasProperty("SNAPSHOT")
}

def getLocalRepositoryUrl() {
    return hasProperty('LOCAL_REPOSITORY_URL') ? LOCAL_REPOSITORY_URL
            : 'file://' + new File(System.getProperty('user.home'), '.m2/repository').absolutePath
}

def getReleaseRepositoryUrl() {
    return hasProperty('RELEASE_REPOSITORY_URL') ? RELEASE_REPOSITORY_URL
            : "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
}

def getSnapshotRepositoryUrl() {
    return hasProperty('SNAPSHOT_REPOSITORY_URL') ? SNAPSHOT_REPOSITORY_URL
            : "https://oss.sonatype.org/content/repositories/snapshots/"
}

def getRepositoryUsername() {
    return hasProperty('NEXUS_USERNAME') ? NEXUS_USERNAME : ""
}

def getRepositoryPassword() {
    return hasProperty('NEXUS_PASSWORD') ? NEXUS_PASSWORD : ""
}

def getGroupId() {
    return GROUPID;
}

def getArtifactId() {
    return ARTIFACTID;
}

def getVersion() {
    if (isReleaseBuild()) {
        return VERSION.replace("-SNAPSHOT", "")
    } else {
        return VERSION;
    }
}

task androidJavadocs(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    options.addStringOption('Xdoclint:none', '-quiet')
}

task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
    archiveClassifier.set('javadoc')
    from androidJavadocs.destinationDir
}

task androidSourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    from android.sourceSets.main.java.srcDirs
}

afterEvaluate { //For android we need to wrap the publishing inside afterEvaluate
    publishing {
        publications {
            release(MavenPublication) {
                from components.release

                groupId = GROUPID
                artifactId = ARTIFACTID
                version = getVersion()

                println 'Publishing artifact: ' + GROUPID + ':' + ARTIFACTID + '-' + getVersion()

                pom {
                    name = libraryName
                    description = libraryDescription
                    url = librarySiteUrl

                    licenses {
                        license {
                            name = licenseName
                            url = licenseUrl
                        }
                    }

                    developers {
                        developer {
                            id = developerId
                            name = developerName
                            email = developerEmail
                        }
                    }

                    scm {
                        url = libraryGitUrl
                        connection = "scm:$libraryGitUrl"
                        developerConnection = "scm:$libraryGitUrl"
                    }
                }
            }
        }

        repositories {
            if (isReleaseBuild()) {
                maven {
                    credentials {
                        username = getRepositoryUsername()
                        password = getRepositoryPassword()
                    }

                    url getReleaseRepositoryUrl()
                }
            }
            if (isSnapshotBuild()) {
                maven {
                    credentials {
                        username = getRepositoryUsername()
                        password = getRepositoryPassword()
                    }

                    url getSnapshotRepositoryUrl()
                }
            }
        }
    }

    signing {
        required { isReleaseBuild() }
        sign publishing.publications.release
    }
}
